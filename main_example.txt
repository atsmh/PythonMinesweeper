"""
Verlassene Raumstation (Konsolen-Version).

Dieses Spiel simuliert das klassische Minesweeper-Spiel.
Das Spielfeld wird zuf√§llig generiert und der Spieler gibt Koordinaten ein, um Felder aufzudecken.
"""

import random # Wird f√ºr das zuf√§llige Platzieren der Bomben ben√∂tigt


class Board:
    """Repr√§sentiert ein Minesweeper-Spielfeld mit Bomben und Spielmechanik."""
    def __init__(self, dim_size, num_bombs):
        self.dim_size = dim_size # Gr√∂√üe des Spielfelds (z.‚ÄØB. 5x5)
        self.num_bombs = num_bombs # Anzahl der Bomben
        self.board = self.make_new_board() # Erstellt das Spielfeld und platziert Bomben
        self.assign_values_to_board() # Weist jedem Feld die Anzahl benachbarter Bomben zu
        self.dug = set() # Menge der bereits aufgedeckten Felder


    def make_new_board(self):
        """Erstellt ein neues Spielfeld und platziert zuf√§llig Bomben."""
        board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        bombs_planted = 0
        while bombs_planted < self.num_bombs:
            loc = random.randint(0, self.dim_size**2 - 1)
            row = loc // self.dim_size
            col = loc % self.dim_size
            if board[row][col] == '*': # Wenn dort schon eine Bombe ist, weitermachen
                continue
            board[row][col] = '*'
            bombs_planted += 1
        return board

# Zahlenwerte zuweisen
    def assign_values_to_board(self)-> None:
        """
        Z√§hlt benachbarte Bomben f√ºr jedes Feld und speichert die Anzahl.
        """
        for r in range(self.dim_size):
            for c in range(self.dim_size):
                if self.board[r][c] == '*':
                    continue
                self.board[r][c] = self.get_num_neighboring_bombs(r, c)

    def get_num_neighboring_bombs(self, row, col):
        """
        Gibt die Anzahl der benachbarten Bomben eines Feldes zur√ºck.
        """
        num_neighboring_bombs = 0
        for r in range(max(0, row-1), min(self.dim_size-1, row+1)+1):
            for c in range(max(0, col-1), min(self.dim_size-1, col+1)+1):
                if r == row and c == col:
                    continue
                if self.board[r][c] == '*':
                    num_neighboring_bombs += 1
        return num_neighboring_bombs


    def dig(self, row, col):
        """
        Deckt ein Feld auf. Wenn das Feld leer ist, wird rekursiv weitergegraben.
        Gibt False zur√ºck, wenn eine Bombe getroffen wurde.
        """
        self.dug.add((row, col))  # Feld als aufgedeckt markieren
        if self.board[row][col] == '*':
            return False # Spiel verloren
        if self.board[row][col] > 0:
            return True # angrenzende Bomben ‚Üí Zahl anzeigen

        # Wenn das Feld leer ist, rekursiv angrenzende Felder aufdecken
        for r in range(max(0, row-1), min(self.dim_size-1, row+1)+1):
            for c in range(max(0, col-1), min(self.dim_size-1, col+1)+1):
                if (r, c) in self.dug:
                    continue
                self.dig(r, c)
        return True

# Darstellung des Spielfelds
    def __str__(self):
        visible_board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        for row in range(self.dim_size):
            for col in range(self.dim_size):
                if (row, col) in self.dug:
                    visible_board[row][col] = str(self.board[row][col])
                else:
                    visible_board[row][col] = ' '
        # Sch√∂ne Formatierung mit Zeilen- und Spaltennummern
        string_rep = ''
        indices = list(range(self.dim_size))
        indices_row = '   ' + '  '.join(map(str, indices)) + '\n'
        for i, row in enumerate(visible_board):
            string_rep += f'{i} |' + ' |'.join(row) + ' |\n'
        return indices_row + '-'*len(indices_row) + '\n' + string_rep


def play(dim_size=5, num_bombs=5):
    """
    Startet das Spiel und f√ºhrt die Spielschleife aus.
    Der Benutzer gibt Koordinaten ein, um Felder aufzudecken.
    Spielt weiter, bis eine Bombe getroffen oder alle sicheren Felder aufgedeckt sind.
    """
    while True:  # Spielschleife, damit der Spieler nach einer Runde erneut spielen kann
        board = Board(dim_size, num_bombs) # Erzeuge ein neues Spielbrett
        safe = True # Spielstatus

         # Hauptspielschleife
        while len(board.dug) < board.dim_size ** 2 - num_bombs:
            print(board)  # Aktuelles Spielfeld anzeigen
            try:
                 # Benutzerinput
                user_input = input(
                    "Gib die Koordinaten zum Scannen des Spielfelds ein (Reihe, Spalte): "
                    )
                row, col = map(int, user_input.split(','))
                if row < 0 or row >= board.dim_size or col < 0 or col >= dim_size:
                    print("Ung√ºltige Position. Bitte versuche es erneut.")
                    continue
            except ValueError:
                print("Ung√ºltiges Eingabeformat. Verwende: Reihe, Spalte.")
                continue
            # Aufdecken
            safe = board.dig(row, col)
            if not safe:
                break  # Spiel endet, weil eine Bombe getroffen wurde

        # Ergebnis anzeigen
        if safe:
            print("üéâ GL√úCKWUNSCH!!!! DU HAST GEWONNEN!")
        else:
            print("üíÄ GAME OVER!")
            board.dug = {(r, c) for r in range(board.dim_size) for c in range(board.dim_size)}
            print(board)

        # Nach der Runde fragen, ob der Spieler weiterspielen m√∂chte
        again = input("M√∂chtest du eine neue Runde spielen? (ja/nein): ").strip().lower()
        if again not in ["ja", "j", "yes", "y"]:
            print("Danke f√ºrs Spielen!")
            break  # Beendet die `while True`-Schleife und somit das Programm

# Programmstart
if __name__ == '__main__':
    play()
